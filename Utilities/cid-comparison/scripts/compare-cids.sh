#!/bin/bash

# This script will run processes for the sample data CID comparison between IPFS and Singularity

set -e  # Exit on any error

echo "Starting CID comparison between IPFS and Singularity..."

# Create output directory for JSON files
OUTPUT_DIR="/data/comparison_output"
mkdir -p "$OUTPUT_DIR"

IPFS_OUTPUT_FILE="$OUTPUT_DIR/ipfs_cids.json"
SINGULARITY_OUTPUT_FILE="$OUTPUT_DIR/singularity_cids.json"
COMPARISON_REPORT="$OUTPUT_DIR/comparison_report.txt"

# Clear previous comparison report
> "$COMPARISON_REPORT"

echo "Process 1: Checking for IPFS CIDs..."
# Check if IPFS CIDs file exists (should be generated by ipfs-prepare-content.sh)
if [ ! -f "$IPFS_OUTPUT_FILE" ]; then
    echo "✗ IPFS CIDs file not found: $IPFS_OUTPUT_FILE"
    echo "Please run the IPFS preparation script first: ipfs-prepare-content.sh"
    exit 1
fi

# Verify IPFS CIDs file is valid JSON
if ! jq empty "$IPFS_OUTPUT_FILE" >/dev/null 2>&1; then
    echo "✗ IPFS CIDs file is not valid JSON: $IPFS_OUTPUT_FILE"
    exit 1
fi

ipfs_cid_count=$(jq length "$IPFS_OUTPUT_FILE" 2>/dev/null || echo "0")
echo "✓ Found $ipfs_cid_count IPFS CIDs in $IPFS_OUTPUT_FILE"

echo "Process 2: Starting Singularity API..."
# 2. Run the command `nohup singularity run api > /dev/null 2>&1 &` to run the Singularity API in the background.
if ! command -v singularity &> /dev/null; then
    echo "Error: Singularity command not found"
    exit 1
fi

# Start Singularity API in background
nohup singularity run api > /dev/null 2>&1 &
SINGULARITY_PID=$!

echo "✓ Singularity API started (PID: $SINGULARITY_PID)"
echo "Waiting for API to be ready..."
sleep 10

# Check if API is responding
max_attempts=30
attempt=0
while [ $attempt -lt $max_attempts ]; do
    if curl -s http://localhost:9090/api > /dev/null 2>&1; then
        echo "✓ Singularity API is ready"
        break
    fi
    sleep 2
    attempt=$((attempt + 1))
done

if [ $attempt -eq $max_attempts ]; then
    echo "✗ Singularity API failed to start or is not responding"
    kill $SINGULARITY_PID 2>/dev/null || true
    exit 1
fi

echo "Process 3: Extracting Singularity CIDs..."
# 3. Run a set of curl commands to get the CIDs from the prepared sample data.

# Get CIDs from Singularity API
cids_response=$(curl -s -X GET http://localhost:9090/api/preparation/1/piece)

if [ $? -ne 0 ] || [ -z "$cids_response" ]; then
    echo "✗ Failed to get Piece CIDs from Singularity API"
    kill $SINGULARITY_PID 2>/dev/null || true
    exit 1
fi

# Extract pieceCid values
piece_cids=$(echo "$cids_response" | jq -r '.[].pieces[].pieceCid' 2>/dev/null)

if [ -z "$piece_cids" ]; then
    echo "✗ No piece CIDs found in Singularity response"
    kill $SINGULARITY_PID 2>/dev/null || true
    exit 1
fi

echo "✓ Found piece CIDs, extracting file metadata..."

# Initialize Singularity output JSON
echo "[" > "$SINGULARITY_OUTPUT_FILE"
first_file=true

# Loop through each pieceCid to get metadata
for piece_cid in $piece_cids; do
    echo "  Processing piece CID: $piece_cid"
    
    # Get metadata for this piece
    metadata_response=$(curl -s -X GET "http://localhost:9090/api/piece/$piece_cid/metadata")
    
    if [ $? -eq 0 ] && [ -n "$metadata_response" ]; then
        # Extract files from metadata and process without subshell
        files_json=$(echo "$metadata_response" | jq -c '.files[]?' 2>/dev/null)
        
        if [ -n "$files_json" ]; then
            # Process each file using process substitution instead of pipe to avoid subshell
            while IFS= read -r file_obj; do
                if [ -n "$file_obj" ]; then
                    # Extract path and cid
                    path=$(echo "$file_obj" | jq -r '.path // empty')
                    cid=$(echo "$file_obj" | jq -r '.cid // empty')
                    
                    if [ -n "$path" ] && [ -n "$cid" ]; then
                        # Extract filename from path
                        filename=$(basename "$path")
                        
                        # Add comma if not first entry
                        if [[ "$first_file" == "false" ]]; then
                            echo "," >> "$SINGULARITY_OUTPUT_FILE"
                        fi
                        
                        # Create JSON entry
                        echo "  {" >> "$SINGULARITY_OUTPUT_FILE"
                        echo "    \"cid\": \"$cid\"," >> "$SINGULARITY_OUTPUT_FILE"
                        echo "    \"filename\": \"$filename\"," >> "$SINGULARITY_OUTPUT_FILE"
                        echo "    \"full_path\": \"$path\"" >> "$SINGULARITY_OUTPUT_FILE"
                        echo -n "  }" >> "$SINGULARITY_OUTPUT_FILE"
                        
                        first_file=false
                    fi
                fi
            done < <(echo "$files_json")
        fi
    fi
done

echo "" >> "$SINGULARITY_OUTPUT_FILE"
echo "]" >> "$SINGULARITY_OUTPUT_FILE"

echo "✓ Singularity CIDs extracted to $SINGULARITY_OUTPUT_FILE"

echo "Process 4: Comparing CIDs..."
# 4. Compare the CIDs from the IPFS output with the CIDs from the Singularity API output and match on the `filename` keys.

# Create comparison report
echo "CID Comparison Report" > "$COMPARISON_REPORT"
echo "===================" >> "$COMPARISON_REPORT"
echo "Generated on: $(date)" >> "$COMPARISON_REPORT"
echo "" >> "$COMPARISON_REPORT"

# Load JSON files for comparison
if [ ! -f "$SINGULARITY_OUTPUT_FILE" ]; then
    echo "✗ Missing Singularity output file for comparison"
    kill $SINGULARITY_PID 2>/dev/null || true
    exit 1
fi

# Verify Singularity CIDs file is valid JSON
if ! jq empty "$SINGULARITY_OUTPUT_FILE" >/dev/null 2>&1; then
    echo "✗ Singularity CIDs file is not valid JSON: $SINGULARITY_OUTPUT_FILE"
    kill $SINGULARITY_PID 2>/dev/null || true
    exit 1
fi

singularity_cid_count=$(jq length "$SINGULARITY_OUTPUT_FILE" 2>/dev/null || echo "0")
echo "✓ Found $singularity_cid_count Singularity CIDs"

# Compare CIDs using jq
mismatches=0
total_comparisons=0

# Get all unique filenames from both sources
all_filenames=$(jq -r '.[].filename' "$IPFS_OUTPUT_FILE" "$SINGULARITY_OUTPUT_FILE" 2>/dev/null | sort -u)

echo "Comparing CIDs for matching filenames..." | tee -a "$COMPARISON_REPORT"
echo "" >> "$COMPARISON_REPORT"

for filename in $all_filenames; do
    if [ -n "$filename" ]; then
        # Get CIDs for this filename from both sources
        ipfs_cid=$(jq -r --arg fname "$filename" '.[] | select(.filename == $fname) | .cid' "$IPFS_OUTPUT_FILE" 2>/dev/null | head -1)
        singularity_cid=$(jq -r --arg fname "$filename" '.[] | select(.filename == $fname) | .cid' "$SINGULARITY_OUTPUT_FILE" 2>/dev/null | head -1)
        
        if [ -n "$ipfs_cid" ] && [ -n "$singularity_cid" ]; then
            total_comparisons=$((total_comparisons + 1))
            
            if [ "$ipfs_cid" != "$singularity_cid" ]; then
                mismatches=$((mismatches + 1))
                echo "❌ MISMATCH for file: $filename"
                echo "   IPFS CID:        $ipfs_cid"
                echo "   Singularity CID: $singularity_cid"
                echo ""
                
                # Log to report
                echo "MISMATCH: $filename" >> "$COMPARISON_REPORT"
                echo "  IPFS CID:        $ipfs_cid" >> "$COMPARISON_REPORT"
                echo "  Singularity CID: $singularity_cid" >> "$COMPARISON_REPORT"
                echo "" >> "$COMPARISON_REPORT"
            else
                echo "✅ MATCH for file: $filename (CID: $ipfs_cid)"
            fi
        elif [ -n "$ipfs_cid" ]; then
            echo "⚠️  File only in IPFS: $filename (CID: $ipfs_cid)"
            echo "IPFS ONLY: $filename - $ipfs_cid" >> "$COMPARISON_REPORT"
        elif [ -n "$singularity_cid" ]; then
            echo "⚠️  File only in Singularity: $filename (CID: $singularity_cid)"
            echo "SINGULARITY ONLY: $filename - $singularity_cid" >> "$COMPARISON_REPORT"
        fi
    fi
done

# Summary
echo "" >> "$COMPARISON_REPORT"
echo "SUMMARY:" >> "$COMPARISON_REPORT"
echo "Total comparisons: $total_comparisons" >> "$COMPARISON_REPORT"
echo "Mismatches found: $mismatches" >> "$COMPARISON_REPORT"
if [ $total_comparisons -gt 0 ]; then
    echo "Match rate: $(( (total_comparisons - mismatches) * 100 / total_comparisons ))%" >> "$COMPARISON_REPORT"
fi

echo ""
echo "=== COMPARISON SUMMARY ==="
echo "Total comparisons: $total_comparisons"
echo "Mismatches found: $mismatches"
if [ $total_comparisons -gt 0 ]; then
    echo "Match rate: $(( (total_comparisons - mismatches) * 100 / total_comparisons ))%"
fi
echo ""
echo "Detailed report saved to: $COMPARISON_REPORT"
echo "IPFS CIDs saved to: $IPFS_OUTPUT_FILE"
echo "Singularity CIDs saved to: $SINGULARITY_OUTPUT_FILE"

# Cleanup
echo "Stopping Singularity API..."
kill $SINGULARITY_PID 2>/dev/null || true

echo "CID comparison completed!"